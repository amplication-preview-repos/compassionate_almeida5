/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SkinService } from "../skin.service";
import { SkinCreateInput } from "./SkinCreateInput";
import { Skin } from "./Skin";
import { SkinFindManyArgs } from "./SkinFindManyArgs";
import { SkinWhereUniqueInput } from "./SkinWhereUniqueInput";
import { SkinUpdateInput } from "./SkinUpdateInput";

export class SkinControllerBase {
  constructor(protected readonly service: SkinService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Skin })
  async createSkin(@common.Body() data: SkinCreateInput): Promise<Skin> {
    return await this.service.createSkin({
      data: {
        ...data,

        weapon: data.weapon
          ? {
              connect: data.weapon,
            }
          : undefined,

        pattern: data.pattern
          ? {
              connect: data.pattern,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,

        weapon: {
          select: {
            id: true,
          },
        },

        pattern: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Skin] })
  @ApiNestedQuery(SkinFindManyArgs)
  async skins(@common.Req() request: Request): Promise<Skin[]> {
    const args = plainToClass(SkinFindManyArgs, request.query);
    return this.service.skins({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,

        weapon: {
          select: {
            id: true,
          },
        },

        pattern: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Skin })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async skin(
    @common.Param() params: SkinWhereUniqueInput
  ): Promise<Skin | null> {
    const result = await this.service.skin({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,

        weapon: {
          select: {
            id: true,
          },
        },

        pattern: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Skin })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSkin(
    @common.Param() params: SkinWhereUniqueInput,
    @common.Body() data: SkinUpdateInput
  ): Promise<Skin | null> {
    try {
      return await this.service.updateSkin({
        where: params,
        data: {
          ...data,

          weapon: data.weapon
            ? {
                connect: data.weapon,
              }
            : undefined,

          pattern: data.pattern
            ? {
                connect: data.pattern,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,

          weapon: {
            select: {
              id: true,
            },
          },

          pattern: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Skin })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSkin(
    @common.Param() params: SkinWhereUniqueInput
  ): Promise<Skin | null> {
    try {
      return await this.service.deleteSkin({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,

          weapon: {
            select: {
              id: true,
            },
          },

          pattern: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
