/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Skin } from "./Skin";
import { SkinCountArgs } from "./SkinCountArgs";
import { SkinFindManyArgs } from "./SkinFindManyArgs";
import { SkinFindUniqueArgs } from "./SkinFindUniqueArgs";
import { CreateSkinArgs } from "./CreateSkinArgs";
import { UpdateSkinArgs } from "./UpdateSkinArgs";
import { DeleteSkinArgs } from "./DeleteSkinArgs";
import { Weapon } from "../../weapon/base/Weapon";
import { Pattern } from "../../pattern/base/Pattern";
import { SkinService } from "../skin.service";
@graphql.Resolver(() => Skin)
export class SkinResolverBase {
  constructor(protected readonly service: SkinService) {}

  async _skinsMeta(
    @graphql.Args() args: SkinCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Skin])
  async skins(@graphql.Args() args: SkinFindManyArgs): Promise<Skin[]> {
    return this.service.skins(args);
  }

  @graphql.Query(() => Skin, { nullable: true })
  async skin(@graphql.Args() args: SkinFindUniqueArgs): Promise<Skin | null> {
    const result = await this.service.skin(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Skin)
  async createSkin(@graphql.Args() args: CreateSkinArgs): Promise<Skin> {
    return await this.service.createSkin({
      ...args,
      data: {
        ...args.data,

        weapon: args.data.weapon
          ? {
              connect: args.data.weapon,
            }
          : undefined,

        pattern: args.data.pattern
          ? {
              connect: args.data.pattern,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Skin)
  async updateSkin(@graphql.Args() args: UpdateSkinArgs): Promise<Skin | null> {
    try {
      return await this.service.updateSkin({
        ...args,
        data: {
          ...args.data,

          weapon: args.data.weapon
            ? {
                connect: args.data.weapon,
              }
            : undefined,

          pattern: args.data.pattern
            ? {
                connect: args.data.pattern,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Skin)
  async deleteSkin(@graphql.Args() args: DeleteSkinArgs): Promise<Skin | null> {
    try {
      return await this.service.deleteSkin(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Weapon, {
    nullable: true,
    name: "weapon",
  })
  async getWeapon(@graphql.Parent() parent: Skin): Promise<Weapon | null> {
    const result = await this.service.getWeapon(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Pattern, {
    nullable: true,
    name: "pattern",
  })
  async getPattern(@graphql.Parent() parent: Skin): Promise<Pattern | null> {
    const result = await this.service.getPattern(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
