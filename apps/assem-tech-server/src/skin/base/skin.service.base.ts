/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Skin as PrismaSkin,
  Weapon as PrismaWeapon,
  Pattern as PrismaPattern,
} from "@prisma/client";

export class SkinServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SkinCountArgs, "select">): Promise<number> {
    return this.prisma.skin.count(args);
  }

  async skins(args: Prisma.SkinFindManyArgs): Promise<PrismaSkin[]> {
    return this.prisma.skin.findMany(args);
  }
  async skin(args: Prisma.SkinFindUniqueArgs): Promise<PrismaSkin | null> {
    return this.prisma.skin.findUnique(args);
  }
  async createSkin(args: Prisma.SkinCreateArgs): Promise<PrismaSkin> {
    return this.prisma.skin.create(args);
  }
  async updateSkin(args: Prisma.SkinUpdateArgs): Promise<PrismaSkin> {
    return this.prisma.skin.update(args);
  }
  async deleteSkin(args: Prisma.SkinDeleteArgs): Promise<PrismaSkin> {
    return this.prisma.skin.delete(args);
  }

  async getWeapon(parentId: string): Promise<PrismaWeapon | null> {
    return this.prisma.skin
      .findUnique({
        where: { id: parentId },
      })
      .weapon();
  }

  async getPattern(parentId: string): Promise<PrismaPattern | null> {
    return this.prisma.skin
      .findUnique({
        where: { id: parentId },
      })
      .pattern();
  }
}
