/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Weapon as PrismaWeapon,
  Skin as PrismaSkin,
} from "@prisma/client";

export class WeaponServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WeaponCountArgs, "select">): Promise<number> {
    return this.prisma.weapon.count(args);
  }

  async weapons(args: Prisma.WeaponFindManyArgs): Promise<PrismaWeapon[]> {
    return this.prisma.weapon.findMany(args);
  }
  async weapon(
    args: Prisma.WeaponFindUniqueArgs
  ): Promise<PrismaWeapon | null> {
    return this.prisma.weapon.findUnique(args);
  }
  async createWeapon(args: Prisma.WeaponCreateArgs): Promise<PrismaWeapon> {
    return this.prisma.weapon.create(args);
  }
  async updateWeapon(args: Prisma.WeaponUpdateArgs): Promise<PrismaWeapon> {
    return this.prisma.weapon.update(args);
  }
  async deleteWeapon(args: Prisma.WeaponDeleteArgs): Promise<PrismaWeapon> {
    return this.prisma.weapon.delete(args);
  }

  async findSkins(
    parentId: string,
    args: Prisma.SkinFindManyArgs
  ): Promise<PrismaSkin[]> {
    return this.prisma.weapon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .skins(args);
  }
}
