/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Weapon } from "./Weapon";
import { WeaponCountArgs } from "./WeaponCountArgs";
import { WeaponFindManyArgs } from "./WeaponFindManyArgs";
import { WeaponFindUniqueArgs } from "./WeaponFindUniqueArgs";
import { CreateWeaponArgs } from "./CreateWeaponArgs";
import { UpdateWeaponArgs } from "./UpdateWeaponArgs";
import { DeleteWeaponArgs } from "./DeleteWeaponArgs";
import { SkinFindManyArgs } from "../../skin/base/SkinFindManyArgs";
import { Skin } from "../../skin/base/Skin";
import { WeaponService } from "../weapon.service";
@graphql.Resolver(() => Weapon)
export class WeaponResolverBase {
  constructor(protected readonly service: WeaponService) {}

  async _weaponsMeta(
    @graphql.Args() args: WeaponCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Weapon])
  async weapons(@graphql.Args() args: WeaponFindManyArgs): Promise<Weapon[]> {
    return this.service.weapons(args);
  }

  @graphql.Query(() => Weapon, { nullable: true })
  async weapon(
    @graphql.Args() args: WeaponFindUniqueArgs
  ): Promise<Weapon | null> {
    const result = await this.service.weapon(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Weapon)
  async createWeapon(@graphql.Args() args: CreateWeaponArgs): Promise<Weapon> {
    return await this.service.createWeapon({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Weapon)
  async updateWeapon(
    @graphql.Args() args: UpdateWeaponArgs
  ): Promise<Weapon | null> {
    try {
      return await this.service.updateWeapon({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Weapon)
  async deleteWeapon(
    @graphql.Args() args: DeleteWeaponArgs
  ): Promise<Weapon | null> {
    try {
      return await this.service.deleteWeapon(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Skin], { name: "skins" })
  async findSkins(
    @graphql.Parent() parent: Weapon,
    @graphql.Args() args: SkinFindManyArgs
  ): Promise<Skin[]> {
    const results = await this.service.findSkins(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
